const {
  express,
  apializeContext,
  ensureFn,
  asyncHandler,
  defaultNotFound,
} = require("./utils");

function update(model, options = {}, modelOptions = {}) {
  ensureFn(model, "update");
  const { middleware = [], id_mapping = 'id' } = options;
  const inline = middleware.filter((fn) => typeof fn === "function");
  const router = express.Router({ mergeParams: true });
  router.put(
    "/:id",
    apializeContext,
    ...inline,
    asyncHandler(async (req, res) => {
      const id = req.params.id;
      const provided =
        (req.apialize && (req.apialize.body || req.apialize.values)) ||
        req.body ||
        {};
      const ownershipWhere =
        (req.apialize.options && req.apialize.options.where) || {};
      
      // Merge model options for findOne query
      const findOptions = { 
        ...modelOptions, 
        where: { ...ownershipWhere, [id_mapping]: id } 
      };
      const existing = await model.findOne(findOptions);
      if (!existing) return defaultNotFound(res);
      const allAttrs = Object.keys(existing.constructor.rawAttributes).filter(
        (a) =>
          a !== id_mapping && !existing.constructor.rawAttributes[a]._autoGenerated,
      );
      const nextValues = {};
      for (const attr of allAttrs) {
        if (Object.prototype.hasOwnProperty.call(provided, attr)) {
          nextValues[attr] = provided[attr];
        } else {
          const def = existing.constructor.rawAttributes[attr].defaultValue;
          nextValues[attr] = typeof def !== "undefined" ? def : null;
        }
      }
      nextValues[id_mapping] = id;
      existing.set(nextValues);
      if (ownershipWhere && Object.keys(ownershipWhere).length) {
        for (const [k, v] of Object.entries(ownershipWhere)) {
          if (existing[k] !== v) return defaultNotFound(res);
        }
      }
      // Merge model options for save operation
      const saveOptions = { 
        ...modelOptions, 
        fields: Object.keys(nextValues) 
      };
      await existing.save(saveOptions);
      res.json({success: true});
    }),
  );
  router.apialize = {};
  return router;
}

module.exports = update;
