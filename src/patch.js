const {
  express,
  apializeContext,
  ensureFn,
  asyncHandler,
  defaultNotFound,
} = require("./utils");
const {
  withTransactionAndHooks,
  optionsWithTransaction,
  notFoundWithRollback,
} = require("./operationUtils");

function patch(model, options = {}, modelOptions = {}) {
  ensureFn(model, "update");
  const {
    middleware = [],
    id_mapping = "id",
    pre = null,
    post = null,
  } = options;
  const inline = middleware.filter((fn) => typeof fn === "function");
  const router = express.Router({ mergeParams: true });
  router.patch(
    "/:id",
    apializeContext,
    ...inline,
    asyncHandler(async (req, res) => {
      const id = req.params.id;
      const provided =
        (req.apialize && (req.apialize.body || req.apialize.values)) ||
        req.body ||
        {};
      if (id_mapping in provided) delete provided[id_mapping];
      const rawAttrs =
        model.rawAttributes ||
        (model.prototype && model.prototype.rawAttributes) ||
        {};
      const updatableKeys = Object.keys(provided).filter(
        (k) =>
          Object.prototype.hasOwnProperty.call(rawAttrs, k) &&
          k !== id_mapping &&
          !rawAttrs[k]?._autoGenerated,
      );
      const ownershipWhere =
        (req.apialize.options && req.apialize.options.where) || {};
      const payload = await withTransactionAndHooks(
        {
          model,
          options: { ...options, pre, post },
          req,
          res,
          modelOptions,
          idMapping: id_mapping,
        },
        async (context) => {
          if (updatableKeys.length === 0) {
            const findOptions = optionsWithTransaction(
              {
                ...modelOptions,
                where: { [id_mapping]: id },
                attributes: [id_mapping],
              },
              context.transaction,
            );
            const exists = await model.findOne(findOptions);
            if (!exists) {
              return notFoundWithRollback(context);
            }
            context.payload = { success: true, id };
          } else {
            const updateOptions = optionsWithTransaction(
              {
                ...modelOptions,
                where: { ...ownershipWhere, [id_mapping]: id },
                fields: updatableKeys,
              },
              context.transaction,
            );
            const [affected] = await model.update(provided, updateOptions);
            if (!affected) {
              return notFoundWithRollback(context);
            }
            context.payload = { success: true, id };
          }
          return context.payload;
        },
      );
      if (!res.headersSent) {
        res.json(payload);
      }
    }),
  );
  router.apialize = {};
  return router;
}

module.exports = patch;
