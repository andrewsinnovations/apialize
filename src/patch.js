const {
  express,
  apializeContext,
  ensureFn,
  asyncHandler,
  defaultNotFound,
} = require("./utils");

function patch(model, options = {}, modelOptions = {}) {
  ensureFn(model, "update");
  const { middleware = [], id_mapping = 'id' } = options;
  const inline = middleware.filter((fn) => typeof fn === "function");
  const router = express.Router({ mergeParams: true });
  router.patch(
    "/:id",
    apializeContext,
    ...inline,
    asyncHandler(async (req, res) => {
      const id = req.params.id;
      const provided =
        (req.apialize && (req.apialize.body || req.apialize.values)) ||
        req.body ||
        {};
      if (id_mapping in provided) delete provided[id_mapping];
      const rawAttrs =
        model.rawAttributes ||
        (model.prototype && model.prototype.rawAttributes) ||
        {};
      const updatableKeys = Object.keys(provided).filter(
        (k) =>
          Object.prototype.hasOwnProperty.call(rawAttrs, k) &&
          k !== id_mapping &&
          !rawAttrs[k]?._autoGenerated,
      );
      if (updatableKeys.length === 0) {
        // Merge model options for findOne query
        const findOptions = { 
          ...modelOptions, 
          where: { [id_mapping]: id }, 
          attributes: [id_mapping] 
        };
        const exists = await model.findOne(findOptions);
        if (!exists) return defaultNotFound(res);
        return res.json({ success: true, id });
      }
      const ownershipWhere =
        (req.apialize.options && req.apialize.options.where) || {};
      
      // Merge model options for update operation
      const updateOptions = {
        ...modelOptions,
        where: { ...ownershipWhere, [id_mapping]: id },
        fields: updatableKeys,
      };
      const [affected] = await model.update(provided, updateOptions);
      if (!affected) return defaultNotFound(res);
      res.json({ success: true, id });
    }),
  );
  router.apialize = {};
  return router;
}

module.exports = patch;
